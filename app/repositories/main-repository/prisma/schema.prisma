// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  email        String         @unique
  profiles      Profile[]
  organizations Organization[]

  displayName String
  avatarUrl   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([email])
}

enum Role {
  USER
  ADMIN
}

model Profile {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId         String @db.Uuid        
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationSlug String        
  organization   Organization @relation(fields: [organizationSlug], references: [slug], onDelete: Cascade)

  residentSeat Seat?
  reservations Reservation[]

  displayName String
  avatarUrl   String?

  role Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organizationSlug])
  @@index([userId, organizationSlug])
  @@index([id])
}

model Organization {
  slug     String  @id @unique
  name     String
  members  User[]
  profiles  Profile[]
  spaces   Space[]

  description String?
  thumbnail String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model Seat {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  furnitureId  String        @unique 
  reservations Reservation[]
  residentId   String?          @unique @db.Uuid
  resident     Profile?      @relation(fields: [residentId], references: [id])
  spaceId      String @db.Uuid
  space        Space         @relation(fields: [spaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  from   DateTime
  to     DateTime
  byId   String      @unique @db.Uuid
  by     Profile  @relation(fields: [byId], references: [id])
  seatId String    @unique @db.Uuid
  seat   Seat     @relation(fields: [seatId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name    String
  space   Space  @relation(fields: [spaceId], references: [id])
  spaceId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Space {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  organizationSlug String          @unique
  organization   Organization @relation(fields: [organizationSlug], references: [slug])
  name           String       @unique
  description    String?
  rooms          Room[]
  seats          Seat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
